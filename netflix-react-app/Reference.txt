
Webapps 
---
  1. Server Side Rendering Apps (SSR) / Traditional Webapps 
      * Pages will reload / refresh 

      Arch 
        1 Server 
        ---
          Resp: HTML, CSS, JS + Data 

      Codebase 
        1 Project 
        ----
          Front End (HTML, CSS, JS ) + Back End (Java/Dotnet/PHP/Python/Ruby) + DB Queries (SQL, NoSQL)  

      Disadv 
      ---
        1. Server has to do the heavy-lifting 
        2. Slower Webapps 
        3. More Bandwidth Consumption 
        4. More Expensive 
        5. Not a better user experience 


  2. Client Side Rendering Apps (CSR) / Modern Webapps 
      * Pages will not reload / refresh 

      Arch 
      --
        2 Servers 
          1 Front End Server (port 3000) - Single Page App (SPA)
              Resp: HTML, CSS, JS, placeholder for data (wait for data)

          1 Back End Server (port 8080 ) - RESTful API 
              Resp: Data (JSON) 

      Codebase 
      --
        2 Projects 
          1 Front End Project (HTML, CSS, JS)
          1 Back End Project (Java/DotNet/PHP/Python/Ruby + SQL, NoSQL)
      
      Adv
      ---
        1. Workload is shared between two servers 
        2. Faster Webapps 
        3. Less Bandwidth Consumption 
        4. Less Expensive 
        5. Better User Experience to end users 

      Disadv 
      --
        1. Not Search Engine Friendly (can be fixed)
        2. Initial Loading will take longer (can be fixed)

---
Single Page App (SPA)
---
  Characteristics (7)
  --
    1. Page should not reload / refresh 
    2. URL should change 
    3. History should be maintained without page refresh 
    4. Header and footer should be retained
    5. Page should be contextually updated in between header and footer (in b/w section should be updated)
    6. Active menu should be set [TODO]
    7. Page Title should be changed [TODO]
        Refer: react-helmet 

  SPA Frameworks / Libraries 
  ---
    #1 React JS (Library)
    #2 VueJS  (Framework)
    #3 Angular (Framework)

----



---
Components
---
  1. Functional Components [DONE]
    * coded with functions
    * were called as stateless components. not any more
    * were called as dumb components. not any more 

      1. Functional Component with Named Function (Header)
      2. Functional Component with Anonymous Function (Footer)
      3. Functional Component with Arrow Function [Recommended] (Menu)

  2. Class Components 
    * coded with class, extends 
    * are called as stateful components.
    * are called as smart components. 
    * are called as containers 

---

Errors in React 
--
1. Compilation Error 
2. Runtime Error 
3. Compiled with Problems / Warnings

JSX 
---
  * Elements should have closing tags 
  * JSX expressions must have one parent element.
  * class should become className 
  

---


Integrating Bootstrap
--
  1. in index.html (Not Recommended)
  2. [TODO] npm i bootstrap and loading the css and js properly inside react app (Recommended) [TODO]
      Refer: https://create-react-app.dev/docs/adding-bootstrap/


---

Project Structure
--
  src/
    Components/    (functional components)
      Shared/
        Header 
        Footer
        Menu 
      Home/ 
        Home
        ...
        ...
        ...
        ...
      Dashboard/
      Auth/
        Login
        Signup
        ResetPW
      Reports
      ..
      ...
      ..
      ...
      ..
      ..
    Containers/    (class components)
      ..
      ..
      ..
      ..


---
Styling in React JS 
--
  1. Inline Styles [DONE]
  2. Internal Styles [DONE]
  3. External Styles [DONE]


TODOs:
---
  1. Learn about loading staic images inside components 
  2. npm i bootstrap and loading the css and js properly inside react app (Recommended) [TODO]
      Refer: https://create-react-app.dev/docs/adding-bootstrap/
  3. Child to Parent Comp Commn - with a new Show Component 
  4. Optimize Menu Component with MenuItem Component 


Note: 
  Share prev pjt link for static assets 
---

Cross Component Communication / Sharing data across components
---
  1. Parent to Child Component Communication [DONE]
      using Props

  2. Child to Parent Component Communication [TODO][DONE]
      using Props, Events, Callback

  3. Any to Any Component Communication
      3.1 using Context API of React JS 
      3.2 using Redux Framework or its alternatives (MobX, Flux)  

---
Naming Conventions
---
  * Variables, Methods - camelCase
      * string, number, obj  - appName, phone, contact
      * boolean - isValid, isLoggedIn, hasToken, isAuth
      * arrays - colors, contacts or colorList, contactList 
  * Components, Classes - PascalCase
  * File Names of Components - PascalCase 
  * Folder Names* - PascalCase 
  * Event Handlers - camelCase 
      Should have handle prefix or Handler Suffix 
      handleAddToFav() or else addToFavHandler()
  * Never use snake_case
--


1. loading state (show spinner, loader, progress bar )
2. positive state 
3. negative state (error case )


===

Learn about Lifecycle Hooks here
Refer: https://reactjs.org/docs/react-component.html


Routing in ReactJS 
--
  Step 0: 
    npm i react-router-dom

  Step 1: 
    Identifying the URLs and the Menu Items 

    Home              => localhost:3000/
    HOC Demo          => localhost:3000/hoc-demo
    Unit Testing Demo => localhost:3000/unit-testing 
    Hooks Demo        => localhost:3000/hooks
    Context API Demo  => localhost:3000/context-api-demo
    Styled Comp Demo  => localhost:3000/styled-comp-demo

  Step 2: 
    Let's setup the menu with proper URLs  in Menu Component 

  Step 3: 
    LEt's create components for the urls 

  Step 4: 
    Setting up routes in App comp (a.k.a) config the routes 
    Let's put the whole app under BrowserRouter of react-router-dom 

  Step 5: 
    Check the app. Pages will still refresh. Let's fix it 
    Replace a href with Link to 

TODO: Active menu should be set [TODO]
TODO: Page Title should be changed [TODO]
        Refer: react-helmet 

----

